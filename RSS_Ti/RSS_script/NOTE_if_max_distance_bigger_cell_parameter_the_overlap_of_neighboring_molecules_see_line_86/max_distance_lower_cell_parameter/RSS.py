#from http://pymatgen.org/_staTic/Ordering%20Disordered%20Structures.html# Let us start by creaTing a disordered CuAu fcc structure.from pymatgen import Structure, Lattice#specie = {"Cu0+": 0.5, "Au0+": 0.5}#cuau = Structure.from_spacegroup("Fm-3m", LatTice.cubic(3.677), [specie], [[0, 0, 0]])#print (cuau)#from pymatgen.transformaTions.standard_transformaTions import OrderDisorderedStructureTransformaTion#trans = OrderDisorderedStructureTransformaTion()#ss = trans.apply_transformaTion(cuau, return_ranked_list=202)#print(len(ss))#print(ss[0])import randomimport numpy as npfrom pymatgen.io.cif import CifWriterfrom pymatgen.transformations.advanced_transformations import EnumerateStructureTransformationa=6.59365b=5.68615c=20.00000alpha=90beta=90gamma=90minimum_distance = 2.0maximum_distance = 5.0def random_three_vector():      phi = np.random.uniform(0,np.pi*2)      costheta = np.random.uniform(-1,1)      theta = np.arccos( costheta )      x = bond_length * np.sin( theta) * np.cos( phi )      y = bond_length * np.sin( theta) * np.sin( phi )      z = bond_length * np.cos( theta )      return np.array([x,y,z])cell_parameters = np.array([a,b,c])i = 1while (i < 56):    x = random.random()*a    y = random.random()*b    z = random.random()*c    coordinates = np.array([x,y,z])    bond_length = 0.74    vector = random_three_vector()    coordinate_1 = coordinates - (vector/2)    coordinate_2 = coordinates + (vector/2)    red_coordinate_1 = coordinate_1/cell_parameters    red_coordinate_2 = coordinate_2/cell_parameters    #print(red_coordinate_1)    #print(red_coordinate_2)    specie = [{"H": 1.0}, {"H": 1.0}, {"Ti": 1.0}, {"Mo": 1.0}, {"Mo": 1.0}, {"Mo": 1.0}, {"Mo": 1.0}, {"S": 1.0}, {"S": 1.0}, {"S": 1.0}, {"S": 1.0}, {"S": 1.0}, {"S": 1.0}, {"S": 1.0}, {"S": 1.0}]    coords = [[red_coordinate_1[0], red_coordinate_1[1], 	red_coordinate_1[2]],    [red_coordinate_2[0], red_coordinate_2[1], 	red_coordinate_2[2]],	[0.25,	0.162689,	0.131546],	[0.000362,	0.005698,	0.000861],	[0.499638,	0.005698,	0.000861],	[0.25,	0.484637,	0.000725],	[0.75,	0.507768,	-0.001459],	[0.25,	0.829774,	0.925765],	[0.75,	0.840732,	0.922582],	[0.25,	0.805995,	0.085761],	[0.75,	0.838993,	0.076926],	[0.516033,	0.3408,	0.083883],	[-0.016033,	0.3408,	0.083883],	[0.500056,	0.334759,	0.922632],	[-0.000056,	0.334759,	0.922632]]    cuau = Structure.from_spacegroup("P 1", Lattice.from_parameters(a, b, c, alpha, beta, gamma), specie, coords)    cuau.add_oxidation_state_by_element({"S": -2, "Mo": 4, "H": 1, "Ti": 4})    #print(coords)    #print(cuau.get_neighbors(cuau[0], 5.0))    #print(cuau.get_neighbors(cuau[1], 5.0))    x1 = len(cuau.get_neighbors(cuau[0], 2.0))    x2 = len(cuau.get_neighbors(cuau[1], 2.0))    x3 = len(cuau.get_neighbors(cuau[0], 5.0))    x4 = len(cuau.get_neighbors(cuau[1], 5.0))     print(x1)    print(x2)    print(x3)    print(x4)    print()    if x1 < 2 and x2 < 2 and x3 > 1 and x4 > 1:      w = CifWriter(cuau)      w.write_file(str(i) + ".cif")      print(str(i) + " is written")      i = i + 1      del specie      del coords      del cuau    else:      print("not")      del specie      del coords      del cuau